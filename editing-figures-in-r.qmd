---
format:
  html:
    css: styles.css
    toc: true
title: "Editing Figures in R"
title-block-banner: images/urban-cover-photo.png
title-block-banner-color: white
execute:
  echo: false
  code-overflow: wrap
---

# Editing Figures in R

Editing figures in R for Urban style can be done quite easily if you know what to look for. The first step is to ask the researcher for the r files associated with the project in a folder (usually an r project folder). The preferred method is opening a new branch on a GitHub repo. For more information on how to make a new branch on an existing repo, see the [Using GitHub](using-github.qmd) page. If the researcher only has a local folder saved, you can ask them to send you the zipped project folder via email.

Before you begin, make sure the researcher has used the [urbnthemes ggplot2 package](https://urbaninstitute.github.io/urbnthemes/) for generating the figures. 

### Opening the R Project

Go to RStudio on your desktop and open the R project via the zipped file or through GitHub. All of the files will open in RStudio in the side panel. Ask the researchers which file has the associated figure that needs editing. Also ask the researcher for the numbered lines of code, so you can navigate to the figure more easily. 

<!-- Figure -->
::: {#fig-Rstudio-files}
::: no-indent
<box-title-text>RStudio Example</box-title-text>
![](images\editing-figures-in-r.png){fig-align="left"}
<source-note-text>**Source:** Author's screenshot.</source-note-text>
<source-note-text>**Notes:** Highlighted in green are the numbered lines of code. Circled in orange is where you can see all the files in an R project.</source-note-text>

:::
:::

### What to Look for in the File

Next, you will need to find the figure that needs editing or formatting work. The researcher can point you to those lines of code. The key identifier to look out for is <code>ggplot</code>. The whole code chunk should look something like the block below, which when run, will produce an image like the one on the bottom of the code block.

```{r chart-setup}
#| include: false
#| echo: false

library(tidyverse)
library(knitr)
library(kableExtra)
library(urbnthemes)
library(grid)
library(gridExtra)
library(formattable)
library(kableExtra)
library(ggplot2)
library(dplyr)
library(scales)

category <- c("All people", "Children\nunder age 18", "Adults\nages 18â€“64", "Adults\nages 65 and older")

df2 <- read.csv("data/data-fact-sheets.csv", header=FALSE)
filtered_df2 <- df2 %>%
  filter(V1 %in% c("Alabama", "State"))

baseline <- unname(unlist(filtered_df2[, c(11,13,15,17)]))
baseline <- baseline[-c(1,3,5,7)]

full_funding <- unname(unlist(filtered_df2[, c(12,14,16,18)]))
full_funding <- full_funding[-c(1,3,5,7)]

df_fig2 <- data.frame("Category" = category, "Baseline" = baseline, "Full funding and participation in SSI, SNAP, WIC, TANF, CCDF, LIHEAP, and housing
" = full_funding)

df_fig2_long <- tidyr::gather(df_fig2, Series, Value, -"Category")

df_fig2_long$Category <- factor(df_fig2_long$Category, levels = unique(df_fig2_long$Category))

df_fig2_long$Value <- as.numeric(df_fig2_long$Value)

decimal_to_percentage <- function(x) {
  sprintf("%.1f%%", x * 1)
}

```

```{r chart-ggplot}
#| echo: true
#| code-overflow: scroll
#| code-fold: show
#| code-line-numbers: true

ggplot(df_fig2_long, aes(x= Category, y = Value, fill = Series)) +
  geom_bar(stat = "identity", position=position_dodge()) +
  labs(y = "Percent", x = "", fill = "") +
  scale_fill_discrete(labels=c('Current funding and participation', 
                               'Full funding and participation in SSI, SNAP, WIC, TANF, CCDF, LIHEAP, and housing')) +
  geom_text(aes(label = decimal_to_percentage(Value)), 
            vjust = -0.3, position = position_dodge2(width = 0.7, padding = 0.5)) +
  theme_bw() +
  theme(legend.position = "top", 
        legend.justification = "left", 
        legend.margin = margin(t = -8), 
        plot.margin = unit(c(1, 0, 0, 0), "lines"), 
        axis.title.y = element_text(size = 7, family="Lato", colour = "black"), 
        axis.text.x = element_text(size = 8, family="Lato", colour = "black"), 
        axis.text.y = element_text(size = 8, family="Lato", colour = "black"), 
        legend.text = element_text(size=7), 
        legend.title = element_text(size=7), 
        panel.border = element_blank(), 
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        axis.line = element_line(colour = "black")) +
  scale_y_continuous(expand = expansion(mult = 0), 
                     limits=c(0, max(df_fig2_long$Value)*1.5), 
                     labels = decimal_to_percentage) +
  guides(fill = guide_legend(title = ""))

```







